ggthemes::theme_few() + geom_line() +
scale_x_continuous(breaks=seq(thisyr,thisyr+14,2))  +  xlab("Year") +
coord_cartesian(ylim=c(0,150000)) + ylab("Tier 3 ABC (kt)") + geom_point() +
geom_line(data=dfss,aes(x=Yr,y=Catch,col=as.factor(Sim)))+
geom_hline(yintercept=Cabc) +
geom_hline(yintercept=Cofl, linetype="dashed") +
guides(size=FALSE,fill=FALSE,alpha=FALSE,col=FALSE)
pf %>% filter(Alt==alt,variable=="SSB") |>
ggplot(aes(x=Yr,y=mean),width=1.2) + geom_ribbon(aes(ymax=ub,ymin=lb),fill="goldenrod",alpha=.5) +
ggthemes::theme_few() + geom_line() +
scale_x_continuous(breaks=seq(thisyr,thisyr+14,2))  +  xlab("Year") +
coord_cartesian(ylim=c(0,150000)) + ylab("Tier 3 ABC (kt)") + geom_point() +
geom_line(data=dfss,aes(x=Yr,y=SSB,col=as.factor(Sim)))+
geom_hline(yintercept=Cabc) +
geom_hline(yintercept=Cofl, linetype="dashed") +
guides(size=FALSE,fill=FALSE,alpha=FALSE,col=FALSE)
pf %>% filter(Alt==alt,variable=="SSB") |>
ggplot(aes(x=Yr,y=mean),width=1.2) + geom_ribbon(aes(ymax=ub,ymin=lb),fill="goldenrod",alpha=.5) +
ggthemes::theme_few() + geom_line() +
scale_x_continuous(breaks=seq(thisyr,thisyr+14,2))  +  xlab("Year") +
ylab("Tier 3 SSB (kt)") + geom_point() +
geom_line(data=dfss,aes(x=Yr,y=SSB,col=as.factor(Sim)))+
geom_hline(yintercept=Cabc) +
geom_hline(yintercept=Cofl, linetype="dashed") +
guides(size=FALSE,fill=FALSE,alpha=FALSE,col=FALSE)
pf %>% filter(Alt==alt,variable=="SSB") |>
ggplot(aes(x=Yr,y=mean),width=1.2) + geom_ribbon(aes(ymax=ub,ymin=lb),fill="goldenrod",alpha=.5) +
ggthemes::theme_few() + geom_line() +
scale_x_continuous(breaks=seq(thisyr,thisyr+14,2))  +  xlab("Year") +
coord_cartesian(ylim=c(0,NA)) +
ylab("Tier 3 SSB (kt)") + geom_point() +
geom_line(data=dfss,aes(x=Yr,y=SSB,col=as.factor(Sim)))+
geom_hline(yintercept=Cabc) +
geom_hline(yintercept=Cofl, linetype="dashed") +
guides(size=FALSE,fill=FALSE,alpha=FALSE,col=FALSE)
p1 <- pf %>% filter(Alt==alt,variable=="Catch") |>
ggplot(aes(x=Yr,y=mean),width=1.2) + geom_ribbon(aes(ymax=ub,ymin=lb),fill="goldenrod",alpha=.5) +
ggthemes::theme_few() + geom_line() +
scale_x_continuous(breaks=seq(thisyr,thisyr+14,2))  +  xlab("Year") +
coord_cartesian(ylim=c(0,NA)) + ylab("Tier 3 ABC") + geom_point() +
geom_line(data=dfss,aes(x=Yr,y=Catch,col=as.factor(Sim)))+
geom_hline(yintercept=Cabc) +
geom_hline(yintercept=Cofl, linetype="dashed") +
guides(size=FALSE,fill=FALSE,alpha=FALSE,col=FALSE)
p2 <- pf %>% filter(Alt==alt,variable=="SSB") |>
ggplot(aes(x=Yr,y=mean),width=1.2) + geom_ribbon(aes(ymax=ub,ymin=lb),fill="goldenrod",alpha=.5) +
ggthemes::theme_few() + geom_line() +
scale_x_continuous(breaks=seq(thisyr,thisyr+14,2))  +  xlab("Year") +
coord_cartesian(ylim=c(0,NA)) +
ylab("Spawning biomass") + geom_point() +
geom_line(data=dfss,aes(x=Yr,y=SSB,col=as.factor(Sim)))+
geom_hline(yintercept=Cabc) +
geom_hline(yintercept=Cofl, linetype="dashed") +
guides(size=FALSE,fill=FALSE,alpha=FALSE,col=FALSE)
p1/p2
t3 <- p1/ p2 + plot_annotation(title = title[alt] )
t3
head df
head(df)
source("~/_mymods/afsc-assessments/spmR/R/plot-res.R")
library(spmR)
library(spmR)
detach("package:spmR", unload = TRUE)
library(spmR)
library(spmR)
library(spmR)
detach("package:spmR", unload = TRUE)
library(spmR)
runSPM("examples/atka")
df <- runSPM("examples/atka")
plotSPM(df)
df <- runSPM("examples/BSAI NRS")
plotSPM(df)
df <- runSPM("examples/ebspollock")
plotSPM(df)
df <- runSPM("examples/GOA FHS")
df <- runSPM("examples/yfs")
df <- runSPM("examples/yfs")
dat2list("examples/atka/spm.dat")
df <- runSPM("examples/atka")
ls()
getwd()
setwd("../..")
df <- runSPM("examples/atka")
plotSPM(df)
?plotSPM
df <- runSPM("examples/BSAI NRS")
plotSPM(df)
df <- runSPM("examples/ebspollock")
plotSPM(df)
df <- runSPM("examples/yfs")
plotSPM(df)
install.packages(c("bayesplot", "chromote", "data.table", "distributional", "DT", "emmeans", "estimability", "fracdiff", "gdtools", "GenSA", "GGally", "ggforce", "ggfun", "ggm", "ggridges", "ggthemes", "gplots", "graphlayouts", "gt", "insight", "interp", "kableExtra", "listenv", "lwgeom", "magick", "marginaleffects", "MCMCpack", "multicool", "officer", "paletteer", "parallelly", "phylobase", "phylosem", "plot3D", "psych", "quantmod", "QuickJSR", "R.oo", "rainbow", "robustbase", "roxygen2", "rrcov", "RSQLite", "rstantools", "rvest", "SAMtool", "shadowtext", "spatstat.geom", "spdep", "TeachingDemos", "tidyterra", "timechange", "usethis", "V8", "viridis", "XML", "xts", "yulab.utils", "zip"))
install.packages(c("boot", "survival"), lib="/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
pkgdown::build_site().
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
?system
setwd("..")
system(paste0("cd ",dirname,"; "spm",args))
df <- runSPM(here::here("examples","atka"))
getwd()
setwd("spmR ")
setwd("spmR")
df <- runSPM(here::here("examples","atka"))
library(spmR)
here::here()
library(spmR)
here::here()
df <- runSPM(here::here("examples","atka"))
df <- runSPM(here::here("examples","BSAI NRS"))
df <- runSPM(here::here("examples","ebspollock"))
df <- runSPM(here::here("examples","yfs"))
getwd()
library(spmR)
df <- runSPM(here::here("examples","BSAI NRS"),run=FALSE)
plotSPM(df)
getwd()
pkgdown::build_site()
pkgdown::build_site()
pkgdown
?pkgdown
install.packages(c("deldir", "gganimate", "ggplot2", "ggraph", "loo", "mclust", "officer", "prettymapr", "shape", "spatstat.geom", "transformr", "tweenr"))
install.packages("boot", lib="/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library")
pkgdown::build_site()
pkgdown::build_site()
remotes::install_github("nmfs-fish-tools/ghactions4r")
ghactions4r::use_r_cmd_check()
ghactions4r::use_calc_coverage()
ghactions4r::use_update_roxygen_docs()
ghactions4r::use_style_r_code()
ghactions4r::rm_dollar_sign()
ghactions4r::rm_dollar_sign()
ghactions4r::use_update_pkgdown()
ghactions4r::use_update_readme()
ghactions4r::use_update_pkgdown()
build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(spmR)
source("~/.active-rstudio-document", echo=TRUE)
pkgdown::build_site()
#If youâ€™re using GitHub, we also recommend setting up GitHub actions to automatically build and publish your site:
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
options(repos = c(
ropensci = 'https://ropensci.r-universe.dev',
jeroen = 'https://jeroen.r-universe.dev',
cran = 'https://cran.r-project.org'))
# Update some packages
install.packages(c("magick", "openssl", "pdftools", "drake"))
install.packages(c("magick", "openssl", "pdftools", "drake"))
install.packages('curl', repos = 'https://jeroen.r-universe.dev')
Or enable a universe globally:
library(spmR)
?run_model
?runSPM
runSPM("examples/atka")
df <- runSPM("examples/atka")
print_Tier3_tables(df)
library(tidyverse)
print_Tier3_tables(df)
print_Tier3_tables(df) |> gt::gt
print_Tier3_tables(df) |> gt::gt()
print_Tier3_tables(df)
plotSPM()
plotSPM()
plotSPM(df)
library(patchwork)
plotSPM(df)
plotSPM(df)
library(spmR)
plotSPM(df)
df <- runSPM("examples/atka")
plotSPM(df)
p1 <- plotSPM(df)
p1$data
cat(sprintf(
'---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
doi_from_file,
dag_from_file
), file = 'index.qmd')
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
makeqmd()
cat(
sprintf(
'---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
doi_from_file,
dag_from_file
), file = 'index.qmd')
pak::pkg_install("dagitty")
pak::pkg_install("ggdag")
pak::pak_update()
install.packages("broom")
pak::pak_update()
?pak
makeqmd()
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
makeqmd()
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
makeqmd()
install.packages("officer")
makeqmd("10.1139/cjfas-2018-0128")
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
makeqmd("10.1139/cjfas-2018-0128")
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
makeqmd("10.1139/cjfas-2018-0128")
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
makeqmd("10.1139/cjfas-2018-0128")
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
cat(
sprintf(
'---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
#dag <- dagitty::dagitty(%s)
#tidy_dag <- ggdag::tidy_dagitty(dag)
#ggdag::ggdag_status(tidy_dag) +
#ggdag::theme_dag()
plot(1:10)
```
',
#doi_from_file,
#dag_from_file
), file = 'index.qmd')
cat(
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
doi_from_file,
dag_from_file
), file = 'index.qmd')
cat(
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
"doi_from_file",
"dag_from_file"
), file = 'index.qmd')
quarto::quarto_render("index.qmd")
quarto::render("index.qmd")
makeqmd <- function(doi_from_file ="10.1139/cjfas-2018-0128", dag_from_file="Shit"){
cat(
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
"doi_from_file",
"dag_from_file"
), file = 'index.qmd')
quarto::quarto_render("index.qmd")
}
quarto::quarto_render("index.qmd")
cat(
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
), file = 'index.qmd')
cat(
title: "Some title"
cat(
quarto::quarto_render("index.qmd")
?sprintf
cat(
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
' ), file = 'index.qmd')
cat(
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
'doi_from_file',
'dag_from_file'
), file = 'index.qmd')
library(stringr)
?stringr
cat(
stock)
makeqmd <- function(stock="BSAI Atka mackerel", doi_from_file ="10.1139/cjfas-2018-0128", dag_from_file="Shit"){
library(stringr)
cat(
stock)
sprintf( '---
title: "Some title"
date: 09/01/2014
doi: %s
---
## Important links
- [Article](https://doi.org/{{< meta doi >}})
## DAG
```{r}
dag <- dagitty::dagitty(%s)
tidy_dag <- ggdag::tidy_dagitty(dag)
ggdag::ggdag_status(tidy_dag) +
ggdag::theme_dag()
```
',
'doi_from_file',
'dag_from_file'
), file = 'index.qmd')
cat(
'---' \n
cat(
'---' \n
generate_quarto_text <- function(title="Atka mackerel", author="Sandra Lowe", date="June 2024", content) {
# Generate Quarto markdown text
markdown_text <- paste0(
"---\n",
"title: '", title, "'\n",
"author: '", author, "'\n",
"date: '", date, "'\n",
"---\n\n",
content,
"\n"
)
return(markdown_text)
}
render_quarto_document <- function(title, author, date, content, output_format = "html") {
# Generate Quarto markdown text
markdown_text <- generate_quarto_text(title, author, date, content)
# Write the markdown text to a temporary file
temp_file <- tempfile(fileext = ".qmd")
writeLines(markdown_text, temp_file)
# Render the Quarto document
quarto_render(temp_file, output_format = output_format)
# Return the path to the rendered file
rendered_file <- sub("\\.qmd$", paste0(".", output_format), temp_file)
return(rendered_file)
}
# Example usage
title <- "Sample Quarto Document"
author <- "John Doe"
date <- "2024-06-03"
content <- "This is a sample content for the Quarto document."
output_format <- "html"  # Change to "pdf" or "docx" for other formats
rendered_file <- render_quarto_document(title, author, date, content, output_format)
cat("Rendered file: ", rendered_file, "\n")
rendered_file <- render_quarto_document(title, author, date, content, output_format)
library(quarto)
generate_quarto_text <- function(title="Atka mackerel", author="Sandra Lowe", date="June 2024", content) {
# Generate Quarto markdown text
markdown_text <- paste0(
"---\n",
"title: '", title, "'\n",
"author: '", author, "'\n",
"date: '", date, "'\n",
"---\n\n",
content,
"\n"
)
return(markdown_text)
}
render_quarto_document <- function(title, author, date, content, output_format = "html") {
# Generate Quarto markdown text
markdown_text <- generate_quarto_text(title, author, date, content)
# Write the markdown text to a temporary file
temp_file <- tempfile(fileext = ".qmd")
writeLines(markdown_text, temp_file)
# Render the Quarto document
quarto_render(temp_file, output_format = output_format)
# Return the path to the rendered file
rendered_file <- sub("\\.qmd$", paste0(".", output_format), temp_file)
return(rendered_file)
}
# Example usage
title <- "Sample Quarto Document"
author <- "John Doe"
date <- "2024-06-03"
content <- "This is a sample content for the Quarto document."
output_format <- "html"  # Change to "pdf" or "docx" for other formats
rendered_file <- render_quarto_document(title, author, date, content, output_format)
cat("Rendered file: ", rendered_file, "\n")
vignette("hello", package = "quarto")
source("~/_mymods/afsc-assessments/spmR/R/Make_doc.R", echo=TRUE)
library(quarto)
generate_quarto_text <- function(title="Atka mackerel", author="Sandra Lowe", date="June 2024", content) {
# Generate Quarto markdown text
markdown_text <- paste0(
"---\n",
"title: '", title, "'\n",
"author: '", author, "'\n",
"date: '", date, "'\n",
"---\n\n",
content,
"\n"
)
return(markdown_text)
}
render_quarto_document <- function(title, author, date, content, output_format = "html") {
# Generate Quarto markdown text
markdown_text <- generate_quarto_text(title, author, date, content)
# Write the markdown text to a temporary file
temp_file <- tempfile(fileext = ".qmd")
writeLines(markdown_text, temp_file)
# Render the Quarto document
quarto_render(temp_file, output_format = output_format)
# Return the path to the rendered file
rendered_file <- sub("\\.qmd$", paste0(".", output_format), temp_file)
return(rendered_file)
}
